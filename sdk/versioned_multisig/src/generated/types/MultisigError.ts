/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
/**
 * @category enums
 * @category generated
 */
export enum MultisigError {
  DuplicateMember,
  EmptyMembers,
  TooManyMembers,
  NotAMember,
  InvalidTransactionMessage,
  InvalidProposalStatus,
  NoVoters,
  NoProposers,
  NoExecutors,
  InvalidStaleTransactionIndex,
  NotSupportedForControlled,
  TimeLockNotReleased,
  NoActions,
  MissingAccount,
  InvalidMint,
  InvalidDestination,
  SpendingLimitExceeded,
  DecimalsMismatch,
  UnknownPermission,
  ProtectedAccount,
  TimeLockExceedsMaxAllowed,
  IllegalAccountOwner,
  RentReclamationDisabled,
  InvalidRentCollector,
  ProposalForAnotherMultisig,
  TransactionForAnotherMultisig,
  TransactionNotMatchingProposal,
  TransactionNotLastInBatch,
  BatchNotEmpty,
  SpendingLimitInvalidAmount,
  InvalidInstructionArgs,
  FinalBufferHashMismatch,
  FinalBufferSizeExceeded,
  FinalBufferSizeMismatch,
  MultisigCreateDeprecated,
}

/**
 * @category userTypes
 * @category generated
 */
export const multisigErrorBeet = beet.fixedScalarEnum(
  MultisigError
) as beet.FixedSizeBeet<MultisigError, MultisigError>
